"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDriver = getDriver;
exports.installAppiumServer = installAppiumServer;
exports.installDrivers = installDrivers;
exports.installPlugin = installPlugin;
exports.runAppiumDoctor = runAppiumDoctor;
var _inquirer = _interopRequireDefault(require("inquirer"));
var _ora = _interopRequireDefault(require("ora"));
var _plugin = require("./plugin.js");
var _logger = _interopRequireDefault(require("./logger.js"));
var _shelljs = _interopRequireDefault(require("shelljs"));
var _chalk = _interopRequireDefault(require("chalk"));
var _path = _interopRequireDefault(require("path"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ui = new _logger.default().getInstance();
// @ts-ignore

async function installAppiumServer() {
  newLine();
  const spinner = (0, _ora.default)('Installing Appium Server').start();
  try {
    _shelljs.default.exec('npm install -g appium@next');
    const {
      stdout
    } = _shelljs.default.exec('appium -v');
    spinner.succeed(`üí• üí• üí• Successfully installed server version ${stdout}`);
  } catch (err) {
    spinner.fail(err);
    throw new Error(err);
  } finally {
    spinner.stop();
  }
  ui.log.write('\n');
}
function newLine() {
  ui.log.write('\n');
}
async function getDriver() {
  newLine();
  let drivers = [];
  const spinner = (0, _ora.default)('Fetching available official drivers').start();
  try {
    const {
      stdout
    } = _shelljs.default.exec('appium driver list --json');
    Object.keys(JSON.parse(stdout)).forEach(value => drivers.push({
      name: value
    }));
    spinner.succeed();
    return drivers;
  } catch (err) {
    spinner.fail(err);
    spinner.stop();
  } finally {
    spinner.stop();
  }
}
async function installDrivers(value) {
  await Promise.all(value.map(async driverName => {
    _shelljs.default.exec(`appium driver install ${driverName}`);
  }));
}
async function runAppiumDoctor() {
  const {
    platform
  } = await _inquirer.default.prompt([{
    type: 'list',
    name: 'platform',
    choices: ['android', 'ios', 'dev']
  }]);
  const doctorPath = _path.default.join(__dirname + '/../node_modules/.bin/appium-doctor');
  _shelljs.default.exec(`${doctorPath} --${platform}`);
}
async function installPlugin() {
  const requiredPlugins = await _inquirer.default.prompt([{
    type: 'checkbox',
    message: 'Select Plugins to install',
    name: 'plugins',
    choices: _plugin.plugins,
    validate(answer) {
      if (answer.length < 1) {
        return 'You must choose at least one plugin.';
      }
      return true;
    }
  }]);
  const {
    source
  } = await _inquirer.default.prompt([{
    type: 'list',
    message: 'Source ',
    name: 'source',
    choices: ['npm', 'github', 'git', 'local']
  }]);
  let pluginPath;
  if (source != 'npm') {
    const path = await _inquirer.default.prompt([{
      name: 'pluginPath',
      message: 'Source of plugin'
    }]);
    pluginPath = path.pluginPath;
  }
  const installedPlugins = _shelljs.default.exec('appium plugin list --installed --json', {
    silent: true
  });
  let pluginNamesInstalled = Object.entries(JSON.parse(installedPlugins.stdout));
  let pluginInformation = [];
  pluginNamesInstalled.map(([key, val]) => {
    // @ts-ignore
    pluginInformation.push({
      pluginName: key,
      plugin: val.pkgName,
      installed: val.installed
    });
  });
  await Promise.all(requiredPlugins.plugins.map(async pluginName => {
    newLine();
    const pluginExists = pluginInformation.find(name => name.plugin === pluginName);
    if (pluginExists != undefined) {
      ui.log.write(_chalk.default.yellow(`‚ÑπÔ∏è  Plugin ${pluginName} already installed`));
      newLine();
      ui.log.write(_chalk.default.yellow(`‚ÑπÔ∏è  Checking if any update available for plugin ${pluginName}`));
      newLine();
      _shelljs.default.exec(`appium plugin update ${pluginExists.pluginName}`);
      return;
    } else {
      if (!pluginPath) {
        _shelljs.default.exec(`appium plugin install --source ${source} ${pluginName}`);
      } else {
        _shelljs.default.exec(`appium plugin install --source ${source} --package ${pluginPath} plugin`);
      }
    }
  }));
}