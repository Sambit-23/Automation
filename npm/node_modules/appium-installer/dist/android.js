"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAllEmulators = getAllEmulators;
exports.launchEmulator = launchEmulator;
var _child_process = require("child_process");
var _util = _interopRequireDefault(require("util"));
var _path = _interopRequireDefault(require("path"));
var _fs = _interopRequireDefault(require("fs"));
var _logger = _interopRequireDefault(require("./logger.js"));
var _mobileHelper = require("@nightwatch/mobile-helper");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ui = new _logger.default().getInstance();
const execAsync = _util.default.promisify(_child_process.exec);
function getEmulatorLocation() {
  const androidHome = process.env.ANDROID_HOME || process.env.ANDROID_SDK_ROOT;
  return _path.default.join(androidHome, 'emulator', 'emulator');
}
async function getAllEmulators() {
  const emulatorCmd = getEmulatorLocation();
  if (!_fs.default.existsSync(emulatorCmd)) {
    ui.log.write('Found missing dependency for Android...\n');
    let androidSetup = new _mobileHelper.AndroidSetup();
    await androidSetup.run();
  }
  const {
    stdout
  } = await execAsync(`${emulatorCmd} -list-avds`);
  return stdout.split('\n');
}
async function launchEmulator(emulatorID) {
  const androidHome = process.env.ANDROID_HOME || process.env.ANDROID_SDK_ROOT;
  if (!androidHome) {
    console.log('ANDROID_HOME/ANDROID_SDK_ROOT environment variable is not set');
    return;
  }
  (0, _child_process.spawn)(`${getEmulatorLocation()}`, ['-avd', `${emulatorID}`]);
}